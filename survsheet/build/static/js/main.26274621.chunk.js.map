{"version":3,"sources":["components/mySpreadsheet.js","components/NoSheets.js","App.js","reportWebVitals.js","index.js"],"names":["mySpreadsheet","addToRefs","el","cellRefs","includes","push","console","log","state","data","selectedFile","fileName","comment","id","addRow","bind","handleUpload","this","col","i","type","className","name","placeholder","length","setState","ev","inputValue","target","value","uid","preventDefault","FormData","append","fetch","method","body","then","response","json","file","row","u30","cellid","ref","onSubmit","size","onChange","updateInputValue","onClick","headerCreator","map","rowCreator","React","Component","NoSheets","props","createnew","App","renderView","e","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26274621.chunk.js","sourcesContent":["import React from 'react';\r\n// import path from 'path';\r\n\r\nclass mySpreadsheet extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      data: [],\r\n      selectedFile: null,\r\n      fileName: '',\r\n      comment: '',\r\n      id: null\r\n    };\r\n    this.addRow = this.addRow.bind(this);\r\n    // this.rowRef = React.createRef();\r\n    this.handleUpload = this.handleUpload.bind(this);\r\n    this.cellRefs = [];\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.addRow();\r\n  };\r\n\r\n  addToRefs = (el) => { \r\n    if(el && !this.cellRefs.includes(el)){\r\n      this.cellRefs.push(el);\r\n    }\r\n    console.log(this.cellRefs)\r\n  }\r\n\r\n  headerCreator() {\r\n    let col = []\r\n    for (var i = 0; i < 10; i++) {\r\n      col.push(<th><input type=\"text\" className=\"no-bdr-input text-center h5\" name={`field${i + 1}`} placeholder={`Field ${i + 1}`} /></th>)\r\n    }\r\n    return col\r\n  }\r\n\r\n  addRow() {\r\n    let { data } = this.state;\r\n    data.push(data.length);\r\n    this.setState({ data });\r\n  }\r\n\r\n  updateInputValue(ev) {\r\n    this.setState({\r\n      inputValue: ev.target.value\r\n    });\r\n  }\r\n\r\n  handleUpload(uid,ev) {\r\n    ev.preventDefault();\r\n    console.log(ev.target.id);\r\n    let data = new FormData();\r\n    data.append(`file${uid + 1}`, );\r\n    data.append('filename', `fileName${uid + 2}`);\r\n    data.append('comment', `Comment${uid+3}`);\r\n    data.append('id', `${uid+3}`);\r\n\r\n    console.log(data)\r\n\r\n    fetch('http://localhost:8000/upload', {\r\n      method: 'POST',\r\n      body: data,\r\n    }).then((response) => {\r\n      response.json().then((body) => {\r\n        this.setState({ selectedFile: `http://localhost:8000/${body.file}` });\r\n      });\r\n    });\r\n  }\r\n  rowCreator(id) {\r\n    let row = []\r\n    let u30 = id * 30;\r\n    for (var i = 0; i < 10; i++) {\r\n      let uid = u30 + i * 3\r\n      let cellid = id*10+i\r\n      row.push(\r\n        <td>\r\n          <form method=\"POST\" ref={this.addToRefs} id={`formCell${cellid}`} onSubmit={(ev)=> this.handleUpload(uid,ev)}>\r\n            <small className=\"input-group container\">\r\n              <input type=\"file\" className=\"mx-auto p-0 row\" name={`file${uid + 1}`} id={uid + 1}  />\r\n              <input className=\" my-2 \" size=\"33\" type=\"text\" name={`fileName${uid + 2}`} placeholder=\"Name the file with extension\" />\r\n              <input className=\"mb-2\" size=\"33\" type=\"text\" id={uid + 3} name={`Comment${uid+3}`} placeholder={`Comment`} value={this.state.comment} onChange={this.updateInputValue} />\r\n              <button className=\"submit\" type=\"submit\">Upload</button>\r\n            </small>\r\n          </form>\r\n        </td>\r\n      )\r\n    }\r\n    return row\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"text-center\">\r\n        <div>\r\n          <button className=\"btn btn-md btn-secondary m-4\" id=\"addBtn\" type=\"button\" onClick={this.addRow}>\r\n            Add new Row\r\n          </button>\r\n        </div>\r\n        <div className=\"table-responsive\">\r\n          <table className=\"table table-bordered table-striped\">\r\n            <thead className=\"bg-warning\">\r\n              <tr>\r\n                <th><input type=\"text\" className=\"no-bdr-input text-center text-light h5\" placeholder=\"Sheet Name\" /></th>\r\n                {this.headerCreator()}\r\n              </tr>\r\n            </thead>\r\n            <tbody id=\"tbody\">\r\n              {this.state.data.map(id => (\r\n                // <Row id={id} ref={itemRef => this.refs[id] = itemRef} />\r\n                <tr id={id}>\r\n                  <td className=\"align-middle \">\r\n                    <div className=\"cell\">\r\n                      <input type=\"text\" placeholder={id + 1} className=\"no-bdr-input text-center\" />\r\n                    </div>\r\n                  </td>\r\n                  {this.rowCreator(id)}\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n//=======================Component containing text and file input=====================\r\n\r\n// class Row extends React.Component {\r\n//   constructor(props, ref) {\r\n//     super(props);\r\n//     this.state = { selectedFile: null }\r\n//     this.handleUpload = this.handleUpload.bind(this);\r\n//   }\r\n\r\n\r\n//   handleUpload(ev) {\r\n//     ev.preventDefault();\r\n//     const data = new FormData();\r\n//     data.append('file', this.uploadInput.files[0]);\r\n//     data.append('filename', this.fileName.value);\r\n//     data.append('comment', this.comment.value);\r\n//     data.append('id', this.fileName.id);\r\n\r\n//     fetch('http://localhost:8000/upload', {\r\n//       method: 'POST',\r\n//       body: data,\r\n//     }).then((response) => {\r\n//       response.json().then((body) => {\r\n//         this.setState({ selectedFile: `http://localhost:8000/${body.file}` });\r\n//       });\r\n//     });\r\n//   }\r\n\r\n\r\n//   rowCreator() {\r\n//     let row = []\r\n//     for (var i = 0; i < 10; i++) {\r\n//       row.push(\r\n//         <td>\r\n//           <small class=\"input-group container\">\r\n//             <input type=\"file\" class=\"mx-auto p-0 row\" name={`file${this.props.id * 10 + i}`} id={this.props.id * 10 + 1} ref={(ref) => { this.uploadInput = ref; }} />\r\n//             <input class=\" my-2 \" size=\"33\" type=\"text\" name={`fileName ${this.props.id * 10 + i}`} ref={(ref) => { this.fileName = ref; }} placeholder=\"Name the file with extension\" />\r\n//             <input class=\"mb-2\" size=\"33\" type=\"text\" ref={(ref) => { this.comment = ref; }} placeholder=\"Comment\" />\r\n//           </small>\r\n//         </td>\r\n//       )\r\n//     }\r\n//     return row\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <tr>\r\n//         <td class=\"align-middle \">\r\n//           <div class=\"cell\">\r\n//             <input type=\"text\" placeholder={this.props.id + 1} class=\"no-bdr-input text-center\" />\r\n//           </div>\r\n//         </td>\r\n//         {this.rowCreator()}\r\n//       </tr>\r\n//     )\r\n//   }\r\n// }\r\n\r\n\r\n\r\n// handleselectedFile = event => {\r\n//   this.setState({\r\n//     selectedFile: event.target.files[0]\r\n//   })\r\n// }\r\n\r\n// handleUpload = () => {\r\n//   const data = new FormData()\r\n//   data.append('file', this.state.selectedFile, this.state.selectedFile.name)\r\n//   axios\r\n//     .post(endpoint, data, {\r\n//       onUploadProgress: ProgressEvent => {\r\n//         this.setState({\r\n//           loaded: (ProgressEvent.loaded / ProgressEvent.total * 100),\r\n//         })\r\n//       },\r\n//     })\r\n//     .then(res => {\r\n//       console.log(res.statusText)\r\n//     })\r\n// }\r\n\r\n\r\n\r\nexport default mySpreadsheet;","import React from 'react';\r\n\r\nexport default function NoSheets(props){\r\n    return(\r\n        <div className=\"container text-center\">\r\n            <div className=\"description p-5 mt-5\">\r\n                <p className=\"lead\">You don't have any existing survsheet. Create your new SurvSheet now!</p>\r\n            </div>\r\n            <button value={1} className=\"btn btn-warning m-5\" onClick={props.createnew}>Create new SurvSheet</button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport Spreadsheet from './components/mySpreadsheet.js';\nimport NoSheets from './components/NoSheets';\nimport './App.css';\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.createnew = this.createnew.bind(this);\n  }\n\n  state = {\n    renderView: 0\n  }\n\n  createnew(e) {\n    this.setState({\n      renderView: + e.target.value\n    })\n  }\n\n  render() {\n    switch (this.state.renderView) {\n      case 1:\n        return <Spreadsheet />;\n      default:\n        return <NoSheets createnew={this.createnew}/>;\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}